// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cdbpool.proto

/*
Package cdbpool is a generated protocol buffer package.

It is generated from these files:
	cdbpool.proto

It has these top-level messages:
	KVPair
	CondPair
	StoreRecord
	ValueList
	InsertRequest
	MulInsertRequest
	InsertResponse
	SelectRequest
	SelectResponse
	DeleteRequest
	DeleteResponse
	UpdateRequest
	UpdateResponse
	OriSelectRequest
	OriInsertRequest
	OriUpdateRequest
	OriShowRequest
	OriShowResponse
	OriDeleteRequest
	TransferRequest
	TransferResponse
	ServerStatsRequest
	ServerStatsResponse
	MysqlStatsResponse
	ReloadMysqlRequest
	MysqlInfo
	CdbPoolRequest
	CdbPoolResponse
*/
package cdbpool

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResultCode int32

const (
	ResultCode_RC_SUCCESS          ResultCode = 0
	ResultCode_RC_BAD_COMMAND      ResultCode = 1
	ResultCode_RC_NO_CMD_REQ       ResultCode = 2
	ResultCode_RC_NO_BAD_ARGUMENTS ResultCode = 3
	ResultCode_RC_BAD_VSID         ResultCode = 4
	ResultCode_RC_DB_ERROR         ResultCode = 110
	ResultCode_RC_INTERNAL_ERROR   ResultCode = 5000
	ResultCode_RC_DB_BAD_VSID      ResultCode = 1001
	ResultCode_RC_DB_NO_SUCH_DB    ResultCode = 1002
	ResultCode_RC_DB_DB_NOT_WORK   ResultCode = 1003
	ResultCode_RC_DB_POOL_IS_FULL  ResultCode = 1004
	ResultCode_RC_DB_CONNECTION    ResultCode = 1005
	ResultCode_RC_DB_MYSQL_QUERY   ResultCode = 1006
	ResultCode_RC_DB_GET_SQL       ResultCode = 1007
)

var ResultCode_name = map[int32]string{
	0:    "RC_SUCCESS",
	1:    "RC_BAD_COMMAND",
	2:    "RC_NO_CMD_REQ",
	3:    "RC_NO_BAD_ARGUMENTS",
	4:    "RC_BAD_VSID",
	110:  "RC_DB_ERROR",
	5000: "RC_INTERNAL_ERROR",
	1001: "RC_DB_BAD_VSID",
	1002: "RC_DB_NO_SUCH_DB",
	1003: "RC_DB_DB_NOT_WORK",
	1004: "RC_DB_POOL_IS_FULL",
	1005: "RC_DB_CONNECTION",
	1006: "RC_DB_MYSQL_QUERY",
	1007: "RC_DB_GET_SQL",
}
var ResultCode_value = map[string]int32{
	"RC_SUCCESS":          0,
	"RC_BAD_COMMAND":      1,
	"RC_NO_CMD_REQ":       2,
	"RC_NO_BAD_ARGUMENTS": 3,
	"RC_BAD_VSID":         4,
	"RC_DB_ERROR":         110,
	"RC_INTERNAL_ERROR":   5000,
	"RC_DB_BAD_VSID":      1001,
	"RC_DB_NO_SUCH_DB":    1002,
	"RC_DB_DB_NOT_WORK":   1003,
	"RC_DB_POOL_IS_FULL":  1004,
	"RC_DB_CONNECTION":    1005,
	"RC_DB_MYSQL_QUERY":   1006,
	"RC_DB_GET_SQL":       1007,
}

func (x ResultCode) String() string {
	return proto.EnumName(ResultCode_name, int32(x))
}
func (ResultCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ValueType int32

const (
	ValueType_VALUE_TYPE_INVALID ValueType = 0
	ValueType_VALUE_TYPE_INTEGER ValueType = 1
	ValueType_VALUE_TYPE_STRING  ValueType = 2
	ValueType_VALUE_TYPE_FLOAT   ValueType = 3
	ValueType_VALUE_TYPE_TIME    ValueType = 4
	ValueType_VALUE_TYPE_UNKNOWN ValueType = 255
)

var ValueType_name = map[int32]string{
	0:   "VALUE_TYPE_INVALID",
	1:   "VALUE_TYPE_INTEGER",
	2:   "VALUE_TYPE_STRING",
	3:   "VALUE_TYPE_FLOAT",
	4:   "VALUE_TYPE_TIME",
	255: "VALUE_TYPE_UNKNOWN",
}
var ValueType_value = map[string]int32{
	"VALUE_TYPE_INVALID": 0,
	"VALUE_TYPE_INTEGER": 1,
	"VALUE_TYPE_STRING":  2,
	"VALUE_TYPE_FLOAT":   3,
	"VALUE_TYPE_TIME":    4,
	"VALUE_TYPE_UNKNOWN": 255,
}

func (x ValueType) String() string {
	return proto.EnumName(ValueType_name, int32(x))
}
func (ValueType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 单个元素，键-值-类型  三元组
type KVPair struct {
	Key   string    `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string    `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Type  ValueType `protobuf:"varint,3,opt,name=type,enum=cdbpool.ValueType" json:"type,omitempty"`
}

func (m *KVPair) Reset()                    { *m = KVPair{} }
func (m *KVPair) String() string            { return proto.CompactTextString(m) }
func (*KVPair) ProtoMessage()               {}
func (*KVPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *KVPair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KVPair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *KVPair) GetType() ValueType {
	if m != nil {
		return m.Type
	}
	return ValueType_VALUE_TYPE_INVALID
}

// 条件判断，键 值 类型 操作符
type CondPair struct {
	Key       string    `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value     string    `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Type      ValueType `protobuf:"varint,3,opt,name=type,enum=cdbpool.ValueType" json:"type,omitempty"`
	Condition string    `protobuf:"bytes,4,opt,name=condition" json:"condition,omitempty"`
}

func (m *CondPair) Reset()                    { *m = CondPair{} }
func (m *CondPair) String() string            { return proto.CompactTextString(m) }
func (*CondPair) ProtoMessage()               {}
func (*CondPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CondPair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CondPair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CondPair) GetType() ValueType {
	if m != nil {
		return m.Type
	}
	return ValueType_VALUE_TYPE_INVALID
}

func (m *CondPair) GetCondition() string {
	if m != nil {
		return m.Condition
	}
	return ""
}

// 单条对象，包含多个kvp对,对应sql的一行
type StoreRecord struct {
	Units []*KVPair `protobuf:"bytes,1,rep,name=units" json:"units,omitempty"`
}

func (m *StoreRecord) Reset()                    { *m = StoreRecord{} }
func (m *StoreRecord) String() string            { return proto.CompactTextString(m) }
func (*StoreRecord) ProtoMessage()               {}
func (*StoreRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StoreRecord) GetUnits() []*KVPair {
	if m != nil {
		return m.Units
	}
	return nil
}

type ValueList struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *ValueList) Reset()                    { *m = ValueList{} }
func (m *ValueList) String() string            { return proto.CompactTextString(m) }
func (*ValueList) ProtoMessage()               {}
func (*ValueList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ValueList) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// -----INSERT------------
type InsertRequest struct {
	Table  string       `protobuf:"bytes,1,opt,name=table" json:"table,omitempty"`
	Dbname string       `protobuf:"bytes,2,opt,name=dbname" json:"dbname,omitempty"`
	Record *StoreRecord `protobuf:"bytes,3,opt,name=record" json:"record,omitempty"`
}

func (m *InsertRequest) Reset()                    { *m = InsertRequest{} }
func (m *InsertRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertRequest) ProtoMessage()               {}
func (*InsertRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *InsertRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *InsertRequest) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

func (m *InsertRequest) GetRecord() *StoreRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type MulInsertRequest struct {
	Dbname     string       `protobuf:"bytes,1,opt,name=dbname" json:"dbname,omitempty"`
	Table      string       `protobuf:"bytes,2,opt,name=table" json:"table,omitempty"`
	Columns    []string     `protobuf:"bytes,3,rep,name=columns" json:"columns,omitempty"`
	Valuelists []*ValueList `protobuf:"bytes,4,rep,name=valuelists" json:"valuelists,omitempty"`
}

func (m *MulInsertRequest) Reset()                    { *m = MulInsertRequest{} }
func (m *MulInsertRequest) String() string            { return proto.CompactTextString(m) }
func (*MulInsertRequest) ProtoMessage()               {}
func (*MulInsertRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MulInsertRequest) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

func (m *MulInsertRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *MulInsertRequest) GetColumns() []string {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *MulInsertRequest) GetValuelists() []*ValueList {
	if m != nil {
		return m.Valuelists
	}
	return nil
}

type InsertResponse struct {
	Bigid        uint64 `protobuf:"varint,1,opt,name=bigid" json:"bigid,omitempty"`
	LastInsertid uint64 `protobuf:"varint,2,opt,name=last_insertid,json=lastInsertid" json:"last_insertid,omitempty"`
	AffectRows   uint32 `protobuf:"varint,3,opt,name=affect_rows,json=affectRows" json:"affect_rows,omitempty"`
}

func (m *InsertResponse) Reset()                    { *m = InsertResponse{} }
func (m *InsertResponse) String() string            { return proto.CompactTextString(m) }
func (*InsertResponse) ProtoMessage()               {}
func (*InsertResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *InsertResponse) GetBigid() uint64 {
	if m != nil {
		return m.Bigid
	}
	return 0
}

func (m *InsertResponse) GetLastInsertid() uint64 {
	if m != nil {
		return m.LastInsertid
	}
	return 0
}

func (m *InsertResponse) GetAffectRows() uint32 {
	if m != nil {
		return m.AffectRows
	}
	return 0
}

// -----SELECT------------
type SelectRequest struct {
	Dbname        string      `protobuf:"bytes,1,opt,name=dbname" json:"dbname,omitempty"`
	Table         string      `protobuf:"bytes,2,opt,name=table" json:"table,omitempty"`
	Columns       []string    `protobuf:"bytes,3,rep,name=columns" json:"columns,omitempty"`
	Filter        []*CondPair `protobuf:"bytes,4,rep,name=filter" json:"filter,omitempty"`
	FilterType    string      `protobuf:"bytes,5,opt,name=filter_type,json=filterType" json:"filter_type,omitempty"`
	Orderby       string      `protobuf:"bytes,6,opt,name=orderby" json:"orderby,omitempty"`
	Limit         string      `protobuf:"bytes,7,opt,name=limit" json:"limit,omitempty"`
	Forupdate     int32       `protobuf:"varint,8,opt,name=forupdate" json:"forupdate,omitempty"`
	ComplexFilter string      `protobuf:"bytes,9,opt,name=complex_filter,json=complexFilter" json:"complex_filter,omitempty"`
}

func (m *SelectRequest) Reset()                    { *m = SelectRequest{} }
func (m *SelectRequest) String() string            { return proto.CompactTextString(m) }
func (*SelectRequest) ProtoMessage()               {}
func (*SelectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SelectRequest) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

func (m *SelectRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *SelectRequest) GetColumns() []string {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *SelectRequest) GetFilter() []*CondPair {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *SelectRequest) GetFilterType() string {
	if m != nil {
		return m.FilterType
	}
	return ""
}

func (m *SelectRequest) GetOrderby() string {
	if m != nil {
		return m.Orderby
	}
	return ""
}

func (m *SelectRequest) GetLimit() string {
	if m != nil {
		return m.Limit
	}
	return ""
}

func (m *SelectRequest) GetForupdate() int32 {
	if m != nil {
		return m.Forupdate
	}
	return 0
}

func (m *SelectRequest) GetComplexFilter() string {
	if m != nil {
		return m.ComplexFilter
	}
	return ""
}

type SelectResponse struct {
	Records []*StoreRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *SelectResponse) Reset()                    { *m = SelectResponse{} }
func (m *SelectResponse) String() string            { return proto.CompactTextString(m) }
func (*SelectResponse) ProtoMessage()               {}
func (*SelectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SelectResponse) GetRecords() []*StoreRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

// -----------------------
// -----DELETE------------
type DeleteRequest struct {
	Dbname     string      `protobuf:"bytes,1,opt,name=dbname" json:"dbname,omitempty"`
	Table      string      `protobuf:"bytes,2,opt,name=table" json:"table,omitempty"`
	Filter     []*CondPair `protobuf:"bytes,3,rep,name=filter" json:"filter,omitempty"`
	FilterType string      `protobuf:"bytes,4,opt,name=filter_type,json=filterType" json:"filter_type,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteRequest) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

func (m *DeleteRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *DeleteRequest) GetFilter() []*CondPair {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *DeleteRequest) GetFilterType() string {
	if m != nil {
		return m.FilterType
	}
	return ""
}

type DeleteResponse struct {
	Bigid      uint64 `protobuf:"varint,1,opt,name=bigid" json:"bigid,omitempty"`
	AffectRows uint32 `protobuf:"varint,2,opt,name=affect_rows,json=affectRows" json:"affect_rows,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteResponse) GetBigid() uint64 {
	if m != nil {
		return m.Bigid
	}
	return 0
}

func (m *DeleteResponse) GetAffectRows() uint32 {
	if m != nil {
		return m.AffectRows
	}
	return 0
}

// -----------------------
// -----UPDATE------------
type UpdateRequest struct {
	Dbname     string      `protobuf:"bytes,1,opt,name=dbname" json:"dbname,omitempty"`
	Table      string      `protobuf:"bytes,2,opt,name=table" json:"table,omitempty"`
	Records    []*KVPair   `protobuf:"bytes,3,rep,name=records" json:"records,omitempty"`
	Filter     []*CondPair `protobuf:"bytes,4,rep,name=filter" json:"filter,omitempty"`
	FilterType string      `protobuf:"bytes,5,opt,name=filter_type,json=filterType" json:"filter_type,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UpdateRequest) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

func (m *UpdateRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *UpdateRequest) GetRecords() []*KVPair {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *UpdateRequest) GetFilter() []*CondPair {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *UpdateRequest) GetFilterType() string {
	if m != nil {
		return m.FilterType
	}
	return ""
}

type UpdateResponse struct {
	Bigid        uint64 `protobuf:"varint,1,opt,name=bigid" json:"bigid,omitempty"`
	AffectRows   uint32 `protobuf:"varint,2,opt,name=affect_rows,json=affectRows" json:"affect_rows,omitempty"`
	LastInsertid uint64 `protobuf:"varint,3,opt,name=last_insertid,json=lastInsertid" json:"last_insertid,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UpdateResponse) GetBigid() uint64 {
	if m != nil {
		return m.Bigid
	}
	return 0
}

func (m *UpdateResponse) GetAffectRows() uint32 {
	if m != nil {
		return m.AffectRows
	}
	return 0
}

func (m *UpdateResponse) GetLastInsertid() uint64 {
	if m != nil {
		return m.LastInsertid
	}
	return 0
}

// ori select
type OriSelectRequest struct {
	Dbname        string `protobuf:"bytes,1,opt,name=dbname" json:"dbname,omitempty"`
	Table         string `protobuf:"bytes,2,opt,name=table" json:"table,omitempty"`
	Columns       string `protobuf:"bytes,3,opt,name=columns" json:"columns,omitempty"`
	ComplexFilter string `protobuf:"bytes,4,opt,name=complex_filter,json=complexFilter" json:"complex_filter,omitempty"`
	Orderby       string `protobuf:"bytes,5,opt,name=orderby" json:"orderby,omitempty"`
	Limit         string `protobuf:"bytes,6,opt,name=limit" json:"limit,omitempty"`
	Forupdate     int32  `protobuf:"varint,7,opt,name=forupdate" json:"forupdate,omitempty"`
}

func (m *OriSelectRequest) Reset()                    { *m = OriSelectRequest{} }
func (m *OriSelectRequest) String() string            { return proto.CompactTextString(m) }
func (*OriSelectRequest) ProtoMessage()               {}
func (*OriSelectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *OriSelectRequest) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

func (m *OriSelectRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *OriSelectRequest) GetColumns() string {
	if m != nil {
		return m.Columns
	}
	return ""
}

func (m *OriSelectRequest) GetComplexFilter() string {
	if m != nil {
		return m.ComplexFilter
	}
	return ""
}

func (m *OriSelectRequest) GetOrderby() string {
	if m != nil {
		return m.Orderby
	}
	return ""
}

func (m *OriSelectRequest) GetLimit() string {
	if m != nil {
		return m.Limit
	}
	return ""
}

func (m *OriSelectRequest) GetForupdate() int32 {
	if m != nil {
		return m.Forupdate
	}
	return 0
}

// ori insert
type OriInsertRequest struct {
	Dbname  string `protobuf:"bytes,1,opt,name=dbname" json:"dbname,omitempty"`
	Table   string `protobuf:"bytes,2,opt,name=table" json:"table,omitempty"`
	Columns string `protobuf:"bytes,3,opt,name=columns" json:"columns,omitempty"`
	Values  string `protobuf:"bytes,4,opt,name=values" json:"values,omitempty"`
}

func (m *OriInsertRequest) Reset()                    { *m = OriInsertRequest{} }
func (m *OriInsertRequest) String() string            { return proto.CompactTextString(m) }
func (*OriInsertRequest) ProtoMessage()               {}
func (*OriInsertRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *OriInsertRequest) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

func (m *OriInsertRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *OriInsertRequest) GetColumns() string {
	if m != nil {
		return m.Columns
	}
	return ""
}

func (m *OriInsertRequest) GetValues() string {
	if m != nil {
		return m.Values
	}
	return ""
}

// ori update
type OriUpdateRequest struct {
	Dbname        string `protobuf:"bytes,1,opt,name=dbname" json:"dbname,omitempty"`
	Table         string `protobuf:"bytes,2,opt,name=table" json:"table,omitempty"`
	Sets          string `protobuf:"bytes,3,opt,name=sets" json:"sets,omitempty"`
	ComplexFilter string `protobuf:"bytes,4,opt,name=complex_filter,json=complexFilter" json:"complex_filter,omitempty"`
}

func (m *OriUpdateRequest) Reset()                    { *m = OriUpdateRequest{} }
func (m *OriUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*OriUpdateRequest) ProtoMessage()               {}
func (*OriUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *OriUpdateRequest) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

func (m *OriUpdateRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *OriUpdateRequest) GetSets() string {
	if m != nil {
		return m.Sets
	}
	return ""
}

func (m *OriUpdateRequest) GetComplexFilter() string {
	if m != nil {
		return m.ComplexFilter
	}
	return ""
}

// -----------------------
// ori show
type OriShowRequest struct {
	Dbname  string `protobuf:"bytes,1,opt,name=dbname" json:"dbname,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *OriShowRequest) Reset()                    { *m = OriShowRequest{} }
func (m *OriShowRequest) String() string            { return proto.CompactTextString(m) }
func (*OriShowRequest) ProtoMessage()               {}
func (*OriShowRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *OriShowRequest) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

func (m *OriShowRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type OriShowResponse struct {
	Records []*StoreRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *OriShowResponse) Reset()                    { *m = OriShowResponse{} }
func (m *OriShowResponse) String() string            { return proto.CompactTextString(m) }
func (*OriShowResponse) ProtoMessage()               {}
func (*OriShowResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *OriShowResponse) GetRecords() []*StoreRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

// ori delete
type OriDeleteRequest struct {
	Dbname        string `protobuf:"bytes,1,opt,name=dbname" json:"dbname,omitempty"`
	Table         string `protobuf:"bytes,2,opt,name=table" json:"table,omitempty"`
	ComplexFilter string `protobuf:"bytes,3,opt,name=complex_filter,json=complexFilter" json:"complex_filter,omitempty"`
}

func (m *OriDeleteRequest) Reset()                    { *m = OriDeleteRequest{} }
func (m *OriDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*OriDeleteRequest) ProtoMessage()               {}
func (*OriDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *OriDeleteRequest) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

func (m *OriDeleteRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *OriDeleteRequest) GetComplexFilter() string {
	if m != nil {
		return m.ComplexFilter
	}
	return ""
}

// ----transfer begin commit rollback
type TransferRequest struct {
	Dbname  string `protobuf:"bytes,1,opt,name=dbname" json:"dbname,omitempty"`
	Command string `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
}

func (m *TransferRequest) Reset()                    { *m = TransferRequest{} }
func (m *TransferRequest) String() string            { return proto.CompactTextString(m) }
func (*TransferRequest) ProtoMessage()               {}
func (*TransferRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *TransferRequest) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

func (m *TransferRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

type TransferResponse struct {
	Bigid uint64 `protobuf:"varint,1,opt,name=bigid" json:"bigid,omitempty"`
}

func (m *TransferResponse) Reset()                    { *m = TransferResponse{} }
func (m *TransferResponse) String() string            { return proto.CompactTextString(m) }
func (*TransferResponse) ProtoMessage()               {}
func (*TransferResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *TransferResponse) GetBigid() uint64 {
	if m != nil {
		return m.Bigid
	}
	return 0
}

// -----------------------
// -----UPDATE------------
type ServerStatsRequest struct {
	Tmp int32 `protobuf:"varint,1,opt,name=tmp" json:"tmp,omitempty"`
}

func (m *ServerStatsRequest) Reset()                    { *m = ServerStatsRequest{} }
func (m *ServerStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*ServerStatsRequest) ProtoMessage()               {}
func (*ServerStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ServerStatsRequest) GetTmp() int32 {
	if m != nil {
		return m.Tmp
	}
	return 0
}

type ServerStatsResponse struct {
	Stats []*KVPair `protobuf:"bytes,1,rep,name=stats" json:"stats,omitempty"`
}

func (m *ServerStatsResponse) Reset()                    { *m = ServerStatsResponse{} }
func (m *ServerStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*ServerStatsResponse) ProtoMessage()               {}
func (*ServerStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ServerStatsResponse) GetStats() []*KVPair {
	if m != nil {
		return m.Stats
	}
	return nil
}

type MysqlStatsResponse struct {
	StatsStr string `protobuf:"bytes,1,opt,name=stats_str,json=statsStr" json:"stats_str,omitempty"`
}

func (m *MysqlStatsResponse) Reset()                    { *m = MysqlStatsResponse{} }
func (m *MysqlStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*MysqlStatsResponse) ProtoMessage()               {}
func (*MysqlStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *MysqlStatsResponse) GetStatsStr() string {
	if m != nil {
		return m.StatsStr
	}
	return ""
}

type ReloadMysqlRequest struct {
	Reload string `protobuf:"bytes,1,opt,name=reload" json:"reload,omitempty"`
}

func (m *ReloadMysqlRequest) Reset()                    { *m = ReloadMysqlRequest{} }
func (m *ReloadMysqlRequest) String() string            { return proto.CompactTextString(m) }
func (*ReloadMysqlRequest) ProtoMessage()               {}
func (*ReloadMysqlRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ReloadMysqlRequest) GetReload() string {
	if m != nil {
		return m.Reload
	}
	return ""
}

type MysqlInfo struct {
	Sql        string `protobuf:"bytes,1,opt,name=sql" json:"sql,omitempty"`
	MysqlIp    string `protobuf:"bytes,2,opt,name=mysql_ip,json=mysqlIp" json:"mysql_ip,omitempty"`
	MysqlPort  int32  `protobuf:"varint,3,opt,name=mysql_port,json=mysqlPort" json:"mysql_port,omitempty"`
	Dbname     string `protobuf:"bytes,4,opt,name=dbname" json:"dbname,omitempty"`
	Vsid       int32  `protobuf:"varint,5,opt,name=vsid" json:"vsid,omitempty"`
	MysqlErrno uint32 `protobuf:"varint,6,opt,name=mysql_errno,json=mysqlErrno" json:"mysql_errno,omitempty"`
}

func (m *MysqlInfo) Reset()                    { *m = MysqlInfo{} }
func (m *MysqlInfo) String() string            { return proto.CompactTextString(m) }
func (*MysqlInfo) ProtoMessage()               {}
func (*MysqlInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *MysqlInfo) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (m *MysqlInfo) GetMysqlIp() string {
	if m != nil {
		return m.MysqlIp
	}
	return ""
}

func (m *MysqlInfo) GetMysqlPort() int32 {
	if m != nil {
		return m.MysqlPort
	}
	return 0
}

func (m *MysqlInfo) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

func (m *MysqlInfo) GetVsid() int32 {
	if m != nil {
		return m.Vsid
	}
	return 0
}

func (m *MysqlInfo) GetMysqlErrno() uint32 {
	if m != nil {
		return m.MysqlErrno
	}
	return 0
}

// ===========================================================
type CdbPoolRequest struct {
	Logid               string `protobuf:"bytes,1,opt,name=logid" json:"logid,omitempty"`
	Command             string `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	Bigid               uint64 `protobuf:"varint,3,opt,name=bigid" json:"bigid,omitempty"`
	NeedSqlInfo         bool   `protobuf:"varint,4,opt,name=need_sql_info,json=needSqlInfo" json:"need_sql_info,omitempty"`
	RequestOfflineMysql bool   `protobuf:"varint,5,opt,name=request_offline_mysql,json=requestOfflineMysql" json:"request_offline_mysql,omitempty"`
	// Types that are valid to be assigned to Req:
	//	*CdbPoolRequest_StatsReq
	//	*CdbPoolRequest_SelectReq
	//	*CdbPoolRequest_InsertReq
	//	*CdbPoolRequest_DeleteReq
	//	*CdbPoolRequest_UpdateReq
	//	*CdbPoolRequest_MulinsertReq
	//	*CdbPoolRequest_OriSelectReq
	//	*CdbPoolRequest_OriInsertReq
	//	*CdbPoolRequest_OriDeleteReq
	//	*CdbPoolRequest_OriUpdateReq
	//	*CdbPoolRequest_OriShowReq
	//	*CdbPoolRequest_TransferReq
	//	*CdbPoolRequest_ReloadMysqlReq
	Req isCdbPoolRequest_Req `protobuf_oneof:"req"`
}

func (m *CdbPoolRequest) Reset()                    { *m = CdbPoolRequest{} }
func (m *CdbPoolRequest) String() string            { return proto.CompactTextString(m) }
func (*CdbPoolRequest) ProtoMessage()               {}
func (*CdbPoolRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type isCdbPoolRequest_Req interface {
	isCdbPoolRequest_Req()
}

type CdbPoolRequest_StatsReq struct {
	StatsReq *ServerStatsRequest `protobuf:"bytes,10,opt,name=stats_req,json=statsReq,oneof"`
}
type CdbPoolRequest_SelectReq struct {
	SelectReq *SelectRequest `protobuf:"bytes,11,opt,name=select_req,json=selectReq,oneof"`
}
type CdbPoolRequest_InsertReq struct {
	InsertReq *InsertRequest `protobuf:"bytes,12,opt,name=insert_req,json=insertReq,oneof"`
}
type CdbPoolRequest_DeleteReq struct {
	DeleteReq *DeleteRequest `protobuf:"bytes,13,opt,name=delete_req,json=deleteReq,oneof"`
}
type CdbPoolRequest_UpdateReq struct {
	UpdateReq *UpdateRequest `protobuf:"bytes,14,opt,name=update_req,json=updateReq,oneof"`
}
type CdbPoolRequest_MulinsertReq struct {
	MulinsertReq *MulInsertRequest `protobuf:"bytes,15,opt,name=mulinsert_req,json=mulinsertReq,oneof"`
}
type CdbPoolRequest_OriSelectReq struct {
	OriSelectReq *OriSelectRequest `protobuf:"bytes,21,opt,name=ori_select_req,json=oriSelectReq,oneof"`
}
type CdbPoolRequest_OriInsertReq struct {
	OriInsertReq *OriInsertRequest `protobuf:"bytes,22,opt,name=ori_insert_req,json=oriInsertReq,oneof"`
}
type CdbPoolRequest_OriDeleteReq struct {
	OriDeleteReq *OriDeleteRequest `protobuf:"bytes,23,opt,name=ori_delete_req,json=oriDeleteReq,oneof"`
}
type CdbPoolRequest_OriUpdateReq struct {
	OriUpdateReq *OriUpdateRequest `protobuf:"bytes,24,opt,name=ori_update_req,json=oriUpdateReq,oneof"`
}
type CdbPoolRequest_OriShowReq struct {
	OriShowReq *OriShowRequest `protobuf:"bytes,25,opt,name=ori_show_req,json=oriShowReq,oneof"`
}
type CdbPoolRequest_TransferReq struct {
	TransferReq *TransferRequest `protobuf:"bytes,35,opt,name=transfer_req,json=transferReq,oneof"`
}
type CdbPoolRequest_ReloadMysqlReq struct {
	ReloadMysqlReq *ReloadMysqlRequest `protobuf:"bytes,36,opt,name=reload_mysql_req,json=reloadMysqlReq,oneof"`
}

func (*CdbPoolRequest_StatsReq) isCdbPoolRequest_Req()       {}
func (*CdbPoolRequest_SelectReq) isCdbPoolRequest_Req()      {}
func (*CdbPoolRequest_InsertReq) isCdbPoolRequest_Req()      {}
func (*CdbPoolRequest_DeleteReq) isCdbPoolRequest_Req()      {}
func (*CdbPoolRequest_UpdateReq) isCdbPoolRequest_Req()      {}
func (*CdbPoolRequest_MulinsertReq) isCdbPoolRequest_Req()   {}
func (*CdbPoolRequest_OriSelectReq) isCdbPoolRequest_Req()   {}
func (*CdbPoolRequest_OriInsertReq) isCdbPoolRequest_Req()   {}
func (*CdbPoolRequest_OriDeleteReq) isCdbPoolRequest_Req()   {}
func (*CdbPoolRequest_OriUpdateReq) isCdbPoolRequest_Req()   {}
func (*CdbPoolRequest_OriShowReq) isCdbPoolRequest_Req()     {}
func (*CdbPoolRequest_TransferReq) isCdbPoolRequest_Req()    {}
func (*CdbPoolRequest_ReloadMysqlReq) isCdbPoolRequest_Req() {}

func (m *CdbPoolRequest) GetReq() isCdbPoolRequest_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *CdbPoolRequest) GetLogid() string {
	if m != nil {
		return m.Logid
	}
	return ""
}

func (m *CdbPoolRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *CdbPoolRequest) GetBigid() uint64 {
	if m != nil {
		return m.Bigid
	}
	return 0
}

func (m *CdbPoolRequest) GetNeedSqlInfo() bool {
	if m != nil {
		return m.NeedSqlInfo
	}
	return false
}

func (m *CdbPoolRequest) GetRequestOfflineMysql() bool {
	if m != nil {
		return m.RequestOfflineMysql
	}
	return false
}

func (m *CdbPoolRequest) GetStatsReq() *ServerStatsRequest {
	if x, ok := m.GetReq().(*CdbPoolRequest_StatsReq); ok {
		return x.StatsReq
	}
	return nil
}

func (m *CdbPoolRequest) GetSelectReq() *SelectRequest {
	if x, ok := m.GetReq().(*CdbPoolRequest_SelectReq); ok {
		return x.SelectReq
	}
	return nil
}

func (m *CdbPoolRequest) GetInsertReq() *InsertRequest {
	if x, ok := m.GetReq().(*CdbPoolRequest_InsertReq); ok {
		return x.InsertReq
	}
	return nil
}

func (m *CdbPoolRequest) GetDeleteReq() *DeleteRequest {
	if x, ok := m.GetReq().(*CdbPoolRequest_DeleteReq); ok {
		return x.DeleteReq
	}
	return nil
}

func (m *CdbPoolRequest) GetUpdateReq() *UpdateRequest {
	if x, ok := m.GetReq().(*CdbPoolRequest_UpdateReq); ok {
		return x.UpdateReq
	}
	return nil
}

func (m *CdbPoolRequest) GetMulinsertReq() *MulInsertRequest {
	if x, ok := m.GetReq().(*CdbPoolRequest_MulinsertReq); ok {
		return x.MulinsertReq
	}
	return nil
}

func (m *CdbPoolRequest) GetOriSelectReq() *OriSelectRequest {
	if x, ok := m.GetReq().(*CdbPoolRequest_OriSelectReq); ok {
		return x.OriSelectReq
	}
	return nil
}

func (m *CdbPoolRequest) GetOriInsertReq() *OriInsertRequest {
	if x, ok := m.GetReq().(*CdbPoolRequest_OriInsertReq); ok {
		return x.OriInsertReq
	}
	return nil
}

func (m *CdbPoolRequest) GetOriDeleteReq() *OriDeleteRequest {
	if x, ok := m.GetReq().(*CdbPoolRequest_OriDeleteReq); ok {
		return x.OriDeleteReq
	}
	return nil
}

func (m *CdbPoolRequest) GetOriUpdateReq() *OriUpdateRequest {
	if x, ok := m.GetReq().(*CdbPoolRequest_OriUpdateReq); ok {
		return x.OriUpdateReq
	}
	return nil
}

func (m *CdbPoolRequest) GetOriShowReq() *OriShowRequest {
	if x, ok := m.GetReq().(*CdbPoolRequest_OriShowReq); ok {
		return x.OriShowReq
	}
	return nil
}

func (m *CdbPoolRequest) GetTransferReq() *TransferRequest {
	if x, ok := m.GetReq().(*CdbPoolRequest_TransferReq); ok {
		return x.TransferReq
	}
	return nil
}

func (m *CdbPoolRequest) GetReloadMysqlReq() *ReloadMysqlRequest {
	if x, ok := m.GetReq().(*CdbPoolRequest_ReloadMysqlReq); ok {
		return x.ReloadMysqlReq
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CdbPoolRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CdbPoolRequest_OneofMarshaler, _CdbPoolRequest_OneofUnmarshaler, _CdbPoolRequest_OneofSizer, []interface{}{
		(*CdbPoolRequest_StatsReq)(nil),
		(*CdbPoolRequest_SelectReq)(nil),
		(*CdbPoolRequest_InsertReq)(nil),
		(*CdbPoolRequest_DeleteReq)(nil),
		(*CdbPoolRequest_UpdateReq)(nil),
		(*CdbPoolRequest_MulinsertReq)(nil),
		(*CdbPoolRequest_OriSelectReq)(nil),
		(*CdbPoolRequest_OriInsertReq)(nil),
		(*CdbPoolRequest_OriDeleteReq)(nil),
		(*CdbPoolRequest_OriUpdateReq)(nil),
		(*CdbPoolRequest_OriShowReq)(nil),
		(*CdbPoolRequest_TransferReq)(nil),
		(*CdbPoolRequest_ReloadMysqlReq)(nil),
	}
}

func _CdbPoolRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CdbPoolRequest)
	// req
	switch x := m.Req.(type) {
	case *CdbPoolRequest_StatsReq:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StatsReq); err != nil {
			return err
		}
	case *CdbPoolRequest_SelectReq:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelectReq); err != nil {
			return err
		}
	case *CdbPoolRequest_InsertReq:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InsertReq); err != nil {
			return err
		}
	case *CdbPoolRequest_DeleteReq:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteReq); err != nil {
			return err
		}
	case *CdbPoolRequest_UpdateReq:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateReq); err != nil {
			return err
		}
	case *CdbPoolRequest_MulinsertReq:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MulinsertReq); err != nil {
			return err
		}
	case *CdbPoolRequest_OriSelectReq:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OriSelectReq); err != nil {
			return err
		}
	case *CdbPoolRequest_OriInsertReq:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OriInsertReq); err != nil {
			return err
		}
	case *CdbPoolRequest_OriDeleteReq:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OriDeleteReq); err != nil {
			return err
		}
	case *CdbPoolRequest_OriUpdateReq:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OriUpdateReq); err != nil {
			return err
		}
	case *CdbPoolRequest_OriShowReq:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OriShowReq); err != nil {
			return err
		}
	case *CdbPoolRequest_TransferReq:
		b.EncodeVarint(35<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TransferReq); err != nil {
			return err
		}
	case *CdbPoolRequest_ReloadMysqlReq:
		b.EncodeVarint(36<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReloadMysqlReq); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CdbPoolRequest.Req has unexpected type %T", x)
	}
	return nil
}

func _CdbPoolRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CdbPoolRequest)
	switch tag {
	case 10: // req.stats_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServerStatsRequest)
		err := b.DecodeMessage(msg)
		m.Req = &CdbPoolRequest_StatsReq{msg}
		return true, err
	case 11: // req.select_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SelectRequest)
		err := b.DecodeMessage(msg)
		m.Req = &CdbPoolRequest_SelectReq{msg}
		return true, err
	case 12: // req.insert_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InsertRequest)
		err := b.DecodeMessage(msg)
		m.Req = &CdbPoolRequest_InsertReq{msg}
		return true, err
	case 13: // req.delete_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteRequest)
		err := b.DecodeMessage(msg)
		m.Req = &CdbPoolRequest_DeleteReq{msg}
		return true, err
	case 14: // req.update_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateRequest)
		err := b.DecodeMessage(msg)
		m.Req = &CdbPoolRequest_UpdateReq{msg}
		return true, err
	case 15: // req.mulinsert_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MulInsertRequest)
		err := b.DecodeMessage(msg)
		m.Req = &CdbPoolRequest_MulinsertReq{msg}
		return true, err
	case 21: // req.ori_select_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriSelectRequest)
		err := b.DecodeMessage(msg)
		m.Req = &CdbPoolRequest_OriSelectReq{msg}
		return true, err
	case 22: // req.ori_insert_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriInsertRequest)
		err := b.DecodeMessage(msg)
		m.Req = &CdbPoolRequest_OriInsertReq{msg}
		return true, err
	case 23: // req.ori_delete_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriDeleteRequest)
		err := b.DecodeMessage(msg)
		m.Req = &CdbPoolRequest_OriDeleteReq{msg}
		return true, err
	case 24: // req.ori_update_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriUpdateRequest)
		err := b.DecodeMessage(msg)
		m.Req = &CdbPoolRequest_OriUpdateReq{msg}
		return true, err
	case 25: // req.ori_show_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriShowRequest)
		err := b.DecodeMessage(msg)
		m.Req = &CdbPoolRequest_OriShowReq{msg}
		return true, err
	case 35: // req.transfer_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransferRequest)
		err := b.DecodeMessage(msg)
		m.Req = &CdbPoolRequest_TransferReq{msg}
		return true, err
	case 36: // req.reload_mysql_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReloadMysqlRequest)
		err := b.DecodeMessage(msg)
		m.Req = &CdbPoolRequest_ReloadMysqlReq{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CdbPoolRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CdbPoolRequest)
	// req
	switch x := m.Req.(type) {
	case *CdbPoolRequest_StatsReq:
		s := proto.Size(x.StatsReq)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolRequest_SelectReq:
		s := proto.Size(x.SelectReq)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolRequest_InsertReq:
		s := proto.Size(x.InsertReq)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolRequest_DeleteReq:
		s := proto.Size(x.DeleteReq)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolRequest_UpdateReq:
		s := proto.Size(x.UpdateReq)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolRequest_MulinsertReq:
		s := proto.Size(x.MulinsertReq)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolRequest_OriSelectReq:
		s := proto.Size(x.OriSelectReq)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolRequest_OriInsertReq:
		s := proto.Size(x.OriInsertReq)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolRequest_OriDeleteReq:
		s := proto.Size(x.OriDeleteReq)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolRequest_OriUpdateReq:
		s := proto.Size(x.OriUpdateReq)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolRequest_OriShowReq:
		s := proto.Size(x.OriShowReq)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolRequest_TransferReq:
		s := proto.Size(x.TransferReq)
		n += proto.SizeVarint(35<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolRequest_ReloadMysqlReq:
		s := proto.Size(x.ReloadMysqlReq)
		n += proto.SizeVarint(36<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CdbPoolResponse struct {
	Error   int32      `protobuf:"varint,1,opt,name=error" json:"error,omitempty"`
	ErrMsg  string     `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg,omitempty"`
	Command string     `protobuf:"bytes,3,opt,name=command" json:"command,omitempty"`
	Logid   string     `protobuf:"bytes,4,opt,name=logid" json:"logid,omitempty"`
	SqlInfo *MysqlInfo `protobuf:"bytes,5,opt,name=sql_info,json=sqlInfo" json:"sql_info,omitempty"`
	// Types that are valid to be assigned to Resp:
	//	*CdbPoolResponse_StatsResp
	//	*CdbPoolResponse_SelectResp
	//	*CdbPoolResponse_InsertResp
	//	*CdbPoolResponse_DeleteResp
	//	*CdbPoolResponse_UpdateResp
	//	*CdbPoolResponse_TransferResp
	//	*CdbPoolResponse_MysqlStatsResp
	//	*CdbPoolResponse_OriShowResp
	Resp isCdbPoolResponse_Resp `protobuf_oneof:"resp"`
}

func (m *CdbPoolResponse) Reset()                    { *m = CdbPoolResponse{} }
func (m *CdbPoolResponse) String() string            { return proto.CompactTextString(m) }
func (*CdbPoolResponse) ProtoMessage()               {}
func (*CdbPoolResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type isCdbPoolResponse_Resp interface {
	isCdbPoolResponse_Resp()
}

type CdbPoolResponse_StatsResp struct {
	StatsResp *ServerStatsResponse `protobuf:"bytes,10,opt,name=stats_resp,json=statsResp,oneof"`
}
type CdbPoolResponse_SelectResp struct {
	SelectResp *SelectResponse `protobuf:"bytes,11,opt,name=select_resp,json=selectResp,oneof"`
}
type CdbPoolResponse_InsertResp struct {
	InsertResp *InsertResponse `protobuf:"bytes,12,opt,name=insert_resp,json=insertResp,oneof"`
}
type CdbPoolResponse_DeleteResp struct {
	DeleteResp *DeleteResponse `protobuf:"bytes,13,opt,name=delete_resp,json=deleteResp,oneof"`
}
type CdbPoolResponse_UpdateResp struct {
	UpdateResp *UpdateResponse `protobuf:"bytes,14,opt,name=update_resp,json=updateResp,oneof"`
}
type CdbPoolResponse_TransferResp struct {
	TransferResp *TransferResponse `protobuf:"bytes,15,opt,name=transfer_resp,json=transferResp,oneof"`
}
type CdbPoolResponse_MysqlStatsResp struct {
	MysqlStatsResp *MysqlStatsResponse `protobuf:"bytes,16,opt,name=mysql_stats_resp,json=mysqlStatsResp,oneof"`
}
type CdbPoolResponse_OriShowResp struct {
	OriShowResp *OriShowResponse `protobuf:"bytes,17,opt,name=ori_show_resp,json=oriShowResp,oneof"`
}

func (*CdbPoolResponse_StatsResp) isCdbPoolResponse_Resp()      {}
func (*CdbPoolResponse_SelectResp) isCdbPoolResponse_Resp()     {}
func (*CdbPoolResponse_InsertResp) isCdbPoolResponse_Resp()     {}
func (*CdbPoolResponse_DeleteResp) isCdbPoolResponse_Resp()     {}
func (*CdbPoolResponse_UpdateResp) isCdbPoolResponse_Resp()     {}
func (*CdbPoolResponse_TransferResp) isCdbPoolResponse_Resp()   {}
func (*CdbPoolResponse_MysqlStatsResp) isCdbPoolResponse_Resp() {}
func (*CdbPoolResponse_OriShowResp) isCdbPoolResponse_Resp()    {}

func (m *CdbPoolResponse) GetResp() isCdbPoolResponse_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (m *CdbPoolResponse) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *CdbPoolResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CdbPoolResponse) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *CdbPoolResponse) GetLogid() string {
	if m != nil {
		return m.Logid
	}
	return ""
}

func (m *CdbPoolResponse) GetSqlInfo() *MysqlInfo {
	if m != nil {
		return m.SqlInfo
	}
	return nil
}

func (m *CdbPoolResponse) GetStatsResp() *ServerStatsResponse {
	if x, ok := m.GetResp().(*CdbPoolResponse_StatsResp); ok {
		return x.StatsResp
	}
	return nil
}

func (m *CdbPoolResponse) GetSelectResp() *SelectResponse {
	if x, ok := m.GetResp().(*CdbPoolResponse_SelectResp); ok {
		return x.SelectResp
	}
	return nil
}

func (m *CdbPoolResponse) GetInsertResp() *InsertResponse {
	if x, ok := m.GetResp().(*CdbPoolResponse_InsertResp); ok {
		return x.InsertResp
	}
	return nil
}

func (m *CdbPoolResponse) GetDeleteResp() *DeleteResponse {
	if x, ok := m.GetResp().(*CdbPoolResponse_DeleteResp); ok {
		return x.DeleteResp
	}
	return nil
}

func (m *CdbPoolResponse) GetUpdateResp() *UpdateResponse {
	if x, ok := m.GetResp().(*CdbPoolResponse_UpdateResp); ok {
		return x.UpdateResp
	}
	return nil
}

func (m *CdbPoolResponse) GetTransferResp() *TransferResponse {
	if x, ok := m.GetResp().(*CdbPoolResponse_TransferResp); ok {
		return x.TransferResp
	}
	return nil
}

func (m *CdbPoolResponse) GetMysqlStatsResp() *MysqlStatsResponse {
	if x, ok := m.GetResp().(*CdbPoolResponse_MysqlStatsResp); ok {
		return x.MysqlStatsResp
	}
	return nil
}

func (m *CdbPoolResponse) GetOriShowResp() *OriShowResponse {
	if x, ok := m.GetResp().(*CdbPoolResponse_OriShowResp); ok {
		return x.OriShowResp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CdbPoolResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CdbPoolResponse_OneofMarshaler, _CdbPoolResponse_OneofUnmarshaler, _CdbPoolResponse_OneofSizer, []interface{}{
		(*CdbPoolResponse_StatsResp)(nil),
		(*CdbPoolResponse_SelectResp)(nil),
		(*CdbPoolResponse_InsertResp)(nil),
		(*CdbPoolResponse_DeleteResp)(nil),
		(*CdbPoolResponse_UpdateResp)(nil),
		(*CdbPoolResponse_TransferResp)(nil),
		(*CdbPoolResponse_MysqlStatsResp)(nil),
		(*CdbPoolResponse_OriShowResp)(nil),
	}
}

func _CdbPoolResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CdbPoolResponse)
	// resp
	switch x := m.Resp.(type) {
	case *CdbPoolResponse_StatsResp:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StatsResp); err != nil {
			return err
		}
	case *CdbPoolResponse_SelectResp:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelectResp); err != nil {
			return err
		}
	case *CdbPoolResponse_InsertResp:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InsertResp); err != nil {
			return err
		}
	case *CdbPoolResponse_DeleteResp:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteResp); err != nil {
			return err
		}
	case *CdbPoolResponse_UpdateResp:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateResp); err != nil {
			return err
		}
	case *CdbPoolResponse_TransferResp:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TransferResp); err != nil {
			return err
		}
	case *CdbPoolResponse_MysqlStatsResp:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MysqlStatsResp); err != nil {
			return err
		}
	case *CdbPoolResponse_OriShowResp:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OriShowResp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CdbPoolResponse.Resp has unexpected type %T", x)
	}
	return nil
}

func _CdbPoolResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CdbPoolResponse)
	switch tag {
	case 10: // resp.stats_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServerStatsResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &CdbPoolResponse_StatsResp{msg}
		return true, err
	case 11: // resp.select_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SelectResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &CdbPoolResponse_SelectResp{msg}
		return true, err
	case 12: // resp.insert_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InsertResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &CdbPoolResponse_InsertResp{msg}
		return true, err
	case 13: // resp.delete_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &CdbPoolResponse_DeleteResp{msg}
		return true, err
	case 14: // resp.update_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &CdbPoolResponse_UpdateResp{msg}
		return true, err
	case 15: // resp.transfer_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransferResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &CdbPoolResponse_TransferResp{msg}
		return true, err
	case 16: // resp.mysql_stats_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MysqlStatsResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &CdbPoolResponse_MysqlStatsResp{msg}
		return true, err
	case 17: // resp.ori_show_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriShowResponse)
		err := b.DecodeMessage(msg)
		m.Resp = &CdbPoolResponse_OriShowResp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CdbPoolResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CdbPoolResponse)
	// resp
	switch x := m.Resp.(type) {
	case *CdbPoolResponse_StatsResp:
		s := proto.Size(x.StatsResp)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolResponse_SelectResp:
		s := proto.Size(x.SelectResp)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolResponse_InsertResp:
		s := proto.Size(x.InsertResp)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolResponse_DeleteResp:
		s := proto.Size(x.DeleteResp)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolResponse_UpdateResp:
		s := proto.Size(x.UpdateResp)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolResponse_TransferResp:
		s := proto.Size(x.TransferResp)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolResponse_MysqlStatsResp:
		s := proto.Size(x.MysqlStatsResp)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CdbPoolResponse_OriShowResp:
		s := proto.Size(x.OriShowResp)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*KVPair)(nil), "cdbpool.KVPair")
	proto.RegisterType((*CondPair)(nil), "cdbpool.CondPair")
	proto.RegisterType((*StoreRecord)(nil), "cdbpool.StoreRecord")
	proto.RegisterType((*ValueList)(nil), "cdbpool.ValueList")
	proto.RegisterType((*InsertRequest)(nil), "cdbpool.InsertRequest")
	proto.RegisterType((*MulInsertRequest)(nil), "cdbpool.MulInsertRequest")
	proto.RegisterType((*InsertResponse)(nil), "cdbpool.InsertResponse")
	proto.RegisterType((*SelectRequest)(nil), "cdbpool.SelectRequest")
	proto.RegisterType((*SelectResponse)(nil), "cdbpool.SelectResponse")
	proto.RegisterType((*DeleteRequest)(nil), "cdbpool.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "cdbpool.DeleteResponse")
	proto.RegisterType((*UpdateRequest)(nil), "cdbpool.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "cdbpool.UpdateResponse")
	proto.RegisterType((*OriSelectRequest)(nil), "cdbpool.OriSelectRequest")
	proto.RegisterType((*OriInsertRequest)(nil), "cdbpool.OriInsertRequest")
	proto.RegisterType((*OriUpdateRequest)(nil), "cdbpool.OriUpdateRequest")
	proto.RegisterType((*OriShowRequest)(nil), "cdbpool.OriShowRequest")
	proto.RegisterType((*OriShowResponse)(nil), "cdbpool.OriShowResponse")
	proto.RegisterType((*OriDeleteRequest)(nil), "cdbpool.OriDeleteRequest")
	proto.RegisterType((*TransferRequest)(nil), "cdbpool.TransferRequest")
	proto.RegisterType((*TransferResponse)(nil), "cdbpool.TransferResponse")
	proto.RegisterType((*ServerStatsRequest)(nil), "cdbpool.ServerStatsRequest")
	proto.RegisterType((*ServerStatsResponse)(nil), "cdbpool.ServerStatsResponse")
	proto.RegisterType((*MysqlStatsResponse)(nil), "cdbpool.MysqlStatsResponse")
	proto.RegisterType((*ReloadMysqlRequest)(nil), "cdbpool.ReloadMysqlRequest")
	proto.RegisterType((*MysqlInfo)(nil), "cdbpool.MysqlInfo")
	proto.RegisterType((*CdbPoolRequest)(nil), "cdbpool.CdbPoolRequest")
	proto.RegisterType((*CdbPoolResponse)(nil), "cdbpool.CdbPoolResponse")
	proto.RegisterEnum("cdbpool.ResultCode", ResultCode_name, ResultCode_value)
	proto.RegisterEnum("cdbpool.ValueType", ValueType_name, ValueType_value)
}

func init() { proto.RegisterFile("cdbpool.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1678 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xdd, 0x6e, 0xdb, 0xc8,
	0x15, 0xb6, 0xac, 0x3f, 0xeb, 0xc8, 0x92, 0xe9, 0x71, 0x62, 0x29, 0xd8, 0x2d, 0x1a, 0x30, 0xcd,
	0xd6, 0x5d, 0x6c, 0x03, 0xd4, 0x2d, 0x50, 0x60, 0xdb, 0x2d, 0x56, 0x7f, 0xb1, 0x85, 0xe8, 0xc7,
	0x19, 0xc9, 0xde, 0xe6, 0x8a, 0x90, 0xcd, 0x51, 0x96, 0x58, 0x8a, 0x43, 0xcf, 0x50, 0xc9, 0x1a,
	0x7d, 0x81, 0xf6, 0xa6, 0x97, 0x45, 0x6f, 0x0b, 0xf4, 0x11, 0x8a, 0xbe, 0x46, 0x5f, 0xa3, 0xff,
	0x7d, 0x84, 0x16, 0x73, 0xc8, 0x21, 0x29, 0xd2, 0xd9, 0xa6, 0x89, 0x7b, 0xc7, 0xf3, 0xcd, 0x7c,
	0x67, 0xce, 0x39, 0x73, 0xbe, 0x43, 0x4a, 0xd0, 0xb8, 0xb2, 0x2f, 0x7d, 0xce, 0xdd, 0x27, 0xbe,
	0xe0, 0x01, 0x27, 0xd5, 0xc8, 0x34, 0x7f, 0x0e, 0x95, 0x67, 0x17, 0x67, 0x0b, 0x47, 0x10, 0x03,
	0x8a, 0x5f, 0xb1, 0x9b, 0x76, 0xe1, 0x61, 0xe1, 0xa8, 0x46, 0xd5, 0x23, 0xb9, 0x07, 0xe5, 0x57,
	0x0b, 0x77, 0xcd, 0xda, 0xdb, 0x88, 0x85, 0x06, 0xf9, 0x08, 0x4a, 0xc1, 0x8d, 0xcf, 0xda, 0xc5,
	0x87, 0x85, 0xa3, 0xe6, 0x31, 0x79, 0xa2, 0x1d, 0x5f, 0xa8, 0xd5, 0xf9, 0x8d, 0xcf, 0x28, 0xae,
	0x9b, 0x5f, 0xc3, 0x4e, 0x8f, 0x7b, 0xf6, 0xff, 0xc3, 0x37, 0xf9, 0x10, 0x6a, 0x57, 0xdc, 0xb3,
	0x9d, 0xc0, 0xe1, 0x5e, 0xbb, 0x84, 0x1e, 0x12, 0xc0, 0xfc, 0x11, 0xd4, 0x67, 0x01, 0x17, 0x8c,
	0xb2, 0x2b, 0x2e, 0x6c, 0xf2, 0x18, 0xca, 0x6b, 0xcf, 0x09, 0x64, 0xbb, 0xf0, 0xb0, 0x78, 0x54,
	0x3f, 0xde, 0x8b, 0xbd, 0x86, 0x89, 0xd3, 0x70, 0xd5, 0x7c, 0x04, 0x35, 0x3c, 0x66, 0xe4, 0xc8,
	0x80, 0x1c, 0x42, 0x05, 0x23, 0x0a, 0x49, 0x35, 0x1a, 0x59, 0xe6, 0x57, 0xd0, 0x18, 0x7a, 0x92,
	0x89, 0x80, 0xb2, 0xeb, 0x35, 0x93, 0x81, 0xca, 0x23, 0x58, 0x5c, 0xba, 0x2c, 0xca, 0x2d, 0x34,
	0x14, 0xdd, 0xbe, 0xf4, 0x16, 0x2b, 0x9d, 0x5e, 0x64, 0x91, 0x4f, 0xa0, 0x22, 0x30, 0x28, 0xcc,
	0xb0, 0x7e, 0x7c, 0x2f, 0x8e, 0x25, 0x15, 0x30, 0x8d, 0xf6, 0x98, 0xbf, 0x2e, 0x80, 0x31, 0x5e,
	0xbb, 0x9b, 0x07, 0x26, 0xae, 0x0b, 0x1b, 0xae, 0xe3, 0x40, 0xb6, 0xd3, 0x81, 0xb4, 0xa1, 0x7a,
	0xc5, 0xdd, 0xf5, 0xca, 0x93, 0xed, 0x22, 0x26, 0xa2, 0x4d, 0x72, 0x0c, 0x80, 0x39, 0xb9, 0x8e,
	0x0c, 0x64, 0xbb, 0x84, 0xa5, 0xc9, 0x14, 0x5c, 0x55, 0x82, 0xa6, 0x76, 0x99, 0x2e, 0x34, 0x75,
	0x30, 0xd2, 0xe7, 0x9e, 0xc4, 0x53, 0x2f, 0x9d, 0x97, 0x8e, 0x8d, 0xc1, 0x94, 0x68, 0x68, 0x90,
	0x47, 0xd0, 0x70, 0x17, 0x32, 0xb0, 0x1c, 0xdc, 0xec, 0xd8, 0x18, 0x53, 0x89, 0xee, 0x2a, 0x70,
	0x18, 0x61, 0xe4, 0xdb, 0x50, 0x5f, 0x2c, 0x97, 0xec, 0x2a, 0xb0, 0x04, 0x7f, 0x2d, 0xb1, 0x20,
	0x0d, 0x0a, 0x21, 0x44, 0xf9, 0x6b, 0x69, 0xfe, 0x76, 0x1b, 0x1a, 0x33, 0xe6, 0x2a, 0xf3, 0x8e,
	0x73, 0xff, 0x1e, 0x54, 0x96, 0x8e, 0x1b, 0x30, 0x11, 0xe5, 0xbd, 0x1f, 0xe7, 0xad, 0x3b, 0x96,
	0x46, 0x1b, 0x54, 0x94, 0xe1, 0x93, 0x85, 0x8d, 0x59, 0xc6, 0x03, 0x20, 0x84, 0x54, 0x43, 0xaa,
	0x53, 0xb8, 0xb0, 0x99, 0xb8, 0xbc, 0x69, 0x57, 0x70, 0x51, 0x9b, 0x2a, 0x2a, 0xd7, 0x59, 0x39,
	0x41, 0xbb, 0x1a, 0x46, 0x85, 0x86, 0x6a, 0xdd, 0x25, 0x17, 0x6b, 0xdf, 0x5e, 0x04, 0xac, 0xbd,
	0xf3, 0xb0, 0x70, 0x54, 0xa6, 0x09, 0x40, 0x1e, 0x43, 0xf3, 0x8a, 0xaf, 0x7c, 0x97, 0x7d, 0x6d,
	0x45, 0x11, 0xd6, 0x90, 0xdc, 0x88, 0xd0, 0xa7, 0x08, 0x9a, 0x9f, 0x43, 0x53, 0x57, 0x26, 0xba,
	0x88, 0x27, 0x50, 0x0d, 0xbb, 0x46, 0xb7, 0xf9, 0xed, 0xad, 0xa5, 0x37, 0x99, 0xbf, 0x2a, 0x40,
	0xa3, 0xcf, 0x5c, 0x16, 0xb0, 0x77, 0x2b, 0x6e, 0x52, 0xc2, 0xe2, 0xff, 0x58, 0xc2, 0x52, 0xb6,
	0x84, 0xe6, 0x09, 0x34, 0x75, 0x28, 0xdf, 0xd8, 0x56, 0x99, 0x8e, 0xd9, 0xce, 0x75, 0xcc, 0x1f,
	0x0a, 0xd0, 0x38, 0xc7, 0x42, 0xbe, 0x6b, 0x52, 0x71, 0x11, 0x8b, 0xb7, 0xcf, 0x0a, 0xbd, 0x7e,
	0x97, 0x2d, 0xa4, 0x64, 0xa5, 0xa3, 0x7e, 0xaf, 0xfc, 0xf3, 0xba, 0x2b, 0xe6, 0x75, 0x67, 0xfe,
	0xa9, 0x00, 0xc6, 0x54, 0x38, 0x77, 0xa6, 0xac, 0x42, 0x5a, 0x59, 0xf9, 0xfe, 0x2d, 0xdd, 0xd2,
	0xbf, 0x69, 0xd1, 0x94, 0xdf, 0x20, 0x9a, 0xca, 0x1b, 0x45, 0x53, 0xcd, 0x88, 0xc6, 0x14, 0x98,
	0xd0, 0x9d, 0x8d, 0xc9, 0x8d, 0x84, 0x92, 0x17, 0x41, 0x98, 0x88, 0x7e, 0x11, 0xfc, 0x02, 0xcf,
	0x7c, 0x9f, 0x66, 0x23, 0x50, 0x92, 0x2c, 0xd0, 0x07, 0xe2, 0xf3, 0x5b, 0x96, 0xcf, 0xec, 0x42,
	0x53, 0xdd, 0xe0, 0x97, 0xfc, 0xf5, 0x7f, 0x3b, 0x1a, 0x13, 0xf3, 0x02, 0xe6, 0x05, 0xd1, 0xe1,
	0xda, 0x34, 0x3b, 0xb0, 0x17, 0xfb, 0x78, 0xc7, 0x19, 0xf2, 0x12, 0x6b, 0xf0, 0x3e, 0x53, 0x24,
	0x9f, 0x6f, 0xf1, 0xb6, 0x7c, 0x7b, 0xb0, 0x37, 0x17, 0x0b, 0x4f, 0x2e, 0x99, 0x78, 0xab, 0x84,
	0x57, 0xab, 0x85, 0x67, 0x27, 0x09, 0xa3, 0x69, 0x1e, 0x81, 0x91, 0x38, 0xf9, 0x26, 0x9d, 0x99,
	0x1f, 0x01, 0x99, 0x31, 0xf1, 0x8a, 0x89, 0x59, 0xb0, 0x08, 0xa4, 0x3e, 0xd1, 0x80, 0x62, 0xb0,
	0xf2, 0x71, 0x67, 0x99, 0xaa, 0x47, 0xf3, 0xa7, 0x70, 0xb0, 0xb1, 0x2f, 0x72, 0xfa, 0x18, 0xca,
	0x52, 0x01, 0x6f, 0xfc, 0xde, 0xc0, 0x55, 0xf3, 0x07, 0x40, 0xc6, 0x37, 0xf2, 0xda, 0xdd, 0x24,
	0x7f, 0x00, 0x35, 0x5c, 0xb6, 0x64, 0x20, 0xa2, 0xd4, 0x76, 0x10, 0x98, 0x05, 0xc2, 0xfc, 0x04,
	0x08, 0x65, 0x2e, 0x5f, 0xd8, 0x48, 0x4c, 0x95, 0x42, 0x20, 0xaa, 0x4b, 0x11, 0x5a, 0xe6, 0xef,
	0x0b, 0x50, 0xc3, 0x8d, 0x43, 0x6f, 0xc9, 0x55, 0xf8, 0xf2, 0xda, 0xd5, 0x9f, 0x60, 0xf2, 0xda,
	0x25, 0x0f, 0x60, 0x67, 0xa5, 0x96, 0x2d, 0xc7, 0xd7, 0xb5, 0x42, 0x7b, 0xe8, 0x93, 0x6f, 0x01,
	0x84, 0x4b, 0x3e, 0x17, 0x01, 0xde, 0x49, 0x99, 0xd6, 0x10, 0x39, 0xe3, 0x22, 0x5d, 0xfc, 0xd2,
	0x46, 0xf1, 0x09, 0x94, 0x5e, 0x49, 0xc7, 0x46, 0x4d, 0x97, 0x29, 0x3e, 0xab, 0xa1, 0x15, 0xba,
	0x62, 0x42, 0x78, 0x1c, 0x65, 0xdd, 0xa0, 0xa1, 0xf7, 0x81, 0x42, 0xcc, 0x3f, 0x57, 0xa1, 0xd9,
	0xb3, 0x2f, 0xcf, 0x38, 0x77, 0x53, 0x1f, 0x55, 0x2e, 0xd7, 0xd7, 0xa2, 0x86, 0x80, 0x32, 0xde,
	0x7c, 0xb5, 0xc9, 0x35, 0x16, 0xd3, 0xe3, 0xd2, 0x84, 0x86, 0xc7, 0x98, 0x6d, 0x61, 0x8a, 0xde,
	0x92, 0x63, 0xb0, 0x3b, 0xb4, 0xae, 0xc0, 0x59, 0x54, 0x95, 0x63, 0xb8, 0x2f, 0xc2, 0x43, 0x2d,
	0xbe, 0x5c, 0xba, 0x8e, 0xc7, 0x2c, 0x0c, 0x0d, 0x53, 0xd8, 0xa1, 0x07, 0xd1, 0xe2, 0x34, 0x5c,
	0xc3, 0x6a, 0x92, 0x4f, 0xf5, 0x15, 0x09, 0x76, 0xdd, 0x06, 0xfc, 0x8e, 0xfb, 0x20, 0x11, 0x4a,
	0xae, 0x71, 0x4e, 0xb7, 0xa2, 0x1b, 0xa4, 0xec, 0x9a, 0xfc, 0x18, 0x40, 0xe2, 0xe0, 0x45, 0x72,
	0x1d, 0xc9, 0x87, 0x29, 0x72, 0x6a, 0x26, 0x9f, 0x6e, 0xd1, 0x9a, 0xd4, 0x80, 0x22, 0x86, 0x53,
	0x1d, 0x89, 0xbb, 0x19, 0xe2, 0xc6, 0xec, 0x53, 0x44, 0x47, 0x03, 0x8a, 0x68, 0xa3, 0x42, 0x91,
	0xd8, 0xc8, 0x10, 0x37, 0xc4, 0xab, 0x88, 0xb6, 0x06, 0x14, 0x31, 0x9c, 0xaf, 0x48, 0x6c, 0x66,
	0x88, 0x1b, 0x93, 0x4f, 0x11, 0xd7, 0x1a, 0x20, 0x9f, 0x43, 0x63, 0xb5, 0x76, 0x53, 0xd1, 0xee,
	0x21, 0xf7, 0x41, 0xcc, 0xcd, 0x7e, 0xd3, 0x9e, 0x6e, 0xd1, 0xdd, 0x98, 0xa1, 0x3c, 0x74, 0xa0,
	0xc9, 0x85, 0x63, 0xa5, 0x2a, 0x75, 0x3f, 0xe3, 0x22, 0xfb, 0x02, 0x53, 0x2e, 0x78, 0x0a, 0xd3,
	0x2e, 0x52, 0x51, 0x1c, 0xe6, 0x5d, 0xe4, 0xa2, 0xe0, 0x29, 0x4c, 0xbb, 0x48, 0x55, 0xaf, 0x95,
	0x77, 0x91, 0x2d, 0xa0, 0x72, 0x11, 0x63, 0xda, 0x45, 0xaa, 0x8e, 0xed, 0xbc, 0x8b, 0x6c, 0x29,
	0x95, 0x8b, 0x18, 0x23, 0x3f, 0x81, 0x5d, 0xac, 0xc5, 0x97, 0xfc, 0x35, 0x3a, 0x78, 0x80, 0x0e,
	0x5a, 0x1b, 0x95, 0x48, 0x5e, 0x04, 0xa7, 0x5b, 0x14, 0x78, 0x8c, 0x90, 0xcf, 0x60, 0x37, 0x88,
	0x66, 0x1e, 0x92, 0x1f, 0x21, 0xb9, 0x1d, 0x93, 0x33, 0x53, 0xf5, 0x74, 0x8b, 0xd6, 0x83, 0x04,
	0x22, 0x27, 0x60, 0x84, 0xb3, 0x24, 0x14, 0x05, 0xba, 0xf8, 0x4e, 0xa6, 0xe1, 0xf3, 0x03, 0xe9,
	0x74, 0x8b, 0x36, 0xc5, 0x06, 0xda, 0x2d, 0x43, 0x51, 0xb0, 0x6b, 0xf3, 0x77, 0x65, 0xd8, 0x8b,
	0xa5, 0x9e, 0x8c, 0x60, 0x26, 0x04, 0x17, 0xd1, 0x60, 0x0d, 0x0d, 0xd2, 0x82, 0x2a, 0x13, 0xc2,
	0x5a, 0xc9, 0x97, 0xfa, 0x17, 0x14, 0x13, 0x62, 0x2c, 0x5f, 0xa6, 0x87, 0x40, 0x31, 0x37, 0x04,
	0xc2, 0xa1, 0x51, 0x4a, 0x0f, 0x8d, 0xef, 0xc3, 0x4e, 0xac, 0xff, 0x32, 0x86, 0x9e, 0xfc, 0xc8,
	0x89, 0x87, 0x23, 0xad, 0xea, 0x29, 0xf9, 0x19, 0x80, 0xd6, 0xb6, 0xf4, 0x23, 0x71, 0x7f, 0x78,
	0xbb, 0xb8, 0xc3, 0xf8, 0x51, 0xa5, 0x1a, 0x20, 0x9f, 0x42, 0x3d, 0x6e, 0x5a, 0xe9, 0x47, 0xfa,
	0x6e, 0xe5, 0xf4, 0x1d, 0x53, 0x41, 0xc6, 0x88, 0xe2, 0xc6, 0xdd, 0x2a, 0xfd, 0x48, 0xe2, 0xad,
	0x9c, 0xc4, 0x13, 0xae, 0x13, 0x23, 0x8a, 0x1b, 0xb7, 0xa9, 0xf4, 0x23, 0x95, 0xb7, 0x72, 0x2a,
	0x4f, 0xb8, 0x76, 0x8c, 0x28, 0x6e, 0xdc, 0x9f, 0xd2, 0x8f, 0x84, 0xde, 0xca, 0x09, 0x3d, 0xe1,
	0xae, 0x63, 0x44, 0x49, 0x3d, 0xd5, 0x5f, 0xd2, 0xcf, 0x49, 0x3d, 0xfb, 0xc6, 0x55, 0xed, 0x1d,
	0xa4, 0x30, 0xd5, 0x62, 0x61, 0x6f, 0xa5, 0xca, 0x6e, 0x64, 0x5a, 0x2c, 0xff, 0x9a, 0x54, 0x2d,
	0xb6, 0xda, 0x40, 0xc9, 0xcf, 0xa0, 0x91, 0xd2, 0x89, 0xf4, 0xdb, 0xfb, 0x99, 0x5e, 0xcf, 0x7c,
	0xed, 0xa8, 0x5e, 0xe7, 0x09, 0xd4, 0xad, 0x40, 0x49, 0xd1, 0x3e, 0xfe, 0xe3, 0x36, 0x00, 0x65,
	0x72, 0xed, 0x06, 0x3d, 0x6e, 0x33, 0xd2, 0x04, 0xa0, 0x3d, 0x6b, 0x76, 0xde, 0xeb, 0x0d, 0x66,
	0x33, 0x63, 0x8b, 0x10, 0x68, 0xd2, 0x9e, 0xd5, 0xed, 0xf4, 0xad, 0xde, 0x74, 0x3c, 0xee, 0x4c,
	0xfa, 0x46, 0x81, 0xec, 0x43, 0x83, 0xf6, 0xac, 0xc9, 0xd4, 0xea, 0x8d, 0xfb, 0x16, 0x1d, 0x3c,
	0x37, 0xb6, 0x49, 0x0b, 0x0e, 0x42, 0x48, 0xed, 0xec, 0xd0, 0x93, 0xf3, 0xf1, 0x60, 0x32, 0x9f,
	0x19, 0x45, 0xb2, 0x07, 0xf5, 0x88, 0x7f, 0x31, 0x1b, 0xf6, 0x8d, 0x52, 0x04, 0xf4, 0xbb, 0xd6,
	0x80, 0xd2, 0x29, 0x35, 0x3c, 0x72, 0x08, 0xfb, 0xb4, 0x67, 0x0d, 0x27, 0xf3, 0x01, 0x9d, 0x74,
	0x46, 0x11, 0xfc, 0xcb, 0xef, 0x92, 0x03, 0x3c, 0xb9, 0xdf, 0x4d, 0xc8, 0x7f, 0xa9, 0x92, 0xfb,
	0x60, 0x84, 0xe0, 0x64, 0xaa, 0x82, 0x3c, 0xb5, 0xfa, 0x5d, 0xe3, 0xaf, 0xd5, 0xc8, 0x47, 0xbf,
	0x1b, 0xae, 0xcc, 0xad, 0x2f, 0xa6, 0xf4, 0x99, 0xf1, 0xb7, 0x2a, 0x69, 0x01, 0x09, 0xf1, 0xb3,
	0xe9, 0x74, 0x64, 0x0d, 0x67, 0xd6, 0xd3, 0xf3, 0xd1, 0xc8, 0xf8, 0x7b, 0xca, 0x4f, 0x6f, 0x3a,
	0x99, 0x0c, 0x7a, 0xf3, 0xe1, 0x74, 0x62, 0xfc, 0x23, 0xe5, 0x67, 0xfc, 0x62, 0xf6, 0x7c, 0x64,
	0x3d, 0x3f, 0x1f, 0xd0, 0x17, 0xc6, 0x3f, 0xab, 0x84, 0x60, 0xc6, 0xfd, 0xae, 0x75, 0x32, 0x98,
	0x5b, 0xb3, 0xe7, 0x23, 0xe3, 0x5f, 0xd5, 0x8f, 0x7f, 0x53, 0x88, 0xfe, 0x40, 0xc1, 0x9f, 0xc5,
	0x87, 0x40, 0x2e, 0x3a, 0xa3, 0xf3, 0x81, 0x35, 0x7f, 0x71, 0x36, 0xb0, 0x86, 0x93, 0x8b, 0xce,
	0x68, 0xd8, 0x37, 0xb6, 0x72, 0xf8, 0x7c, 0x70, 0x32, 0xa0, 0x46, 0x81, 0xdc, 0x87, 0xfd, 0x14,
	0x3e, 0x9b, 0xd3, 0xe1, 0xe4, 0xc4, 0xd8, 0x26, 0xf7, 0xc0, 0x48, 0xc1, 0x4f, 0x47, 0xd3, 0xce,
	0xdc, 0x28, 0x92, 0x03, 0xd8, 0x4b, 0xa1, 0xf3, 0xe1, 0x78, 0x60, 0x94, 0x54, 0x6e, 0x29, 0xf0,
	0x7c, 0xf2, 0x6c, 0x32, 0xfd, 0x62, 0x62, 0xfc, 0xbb, 0x70, 0x59, 0xc1, 0xbf, 0xbc, 0x7e, 0xf8,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x40, 0x0f, 0xc5, 0x03, 0x13, 0x00, 0x00,
}
